- name: Remove old file if exists
  ansible.builtin.file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ http_keystore }}'
    - '{{ transport_truststore }}'
    - '{{ ca }}/ca.crt'
    - '{{ ca }}/ca.key'
  
### Copying required certs,keys file to other ELS nodes which were generated on 1st ELS node
- name: Copy cert file from node-5 to elastic-node-6
  ansible.builtin.copy:
    src: '/home/mahesh24195/{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: elasticsearch
    mode: '640'
  with_items:
    - { src: ca.crt , dest: '{{ ca }}/ca.crt' }
    - { src: ca.key , dest: '{{ ca }}/ca.key' }
    - { src: elastic-stack-ca.p12 , dest: '{{ certs_dir }}/elastic-stack-ca.p12' }
    - { src: '{{ els_node_6 }}/http.p12', dest: '{{ certs_dir }}/http.p12'}
  when: ansible_hostname[8:14]|lower == 'node-6'

- name: Copy cert file from node-5 to elastic-node-7
  ansible.builtin.copy:
    src: '/home/mahesh24195/{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: root
    group: elasticsearch
    mode: '640'
  with_items:
    - { src: ca.crt , dest: '{{ ca }}/ca.crt' }
    - { src: ca.key , dest: '{{ ca }}/ca.key' }
    - { src: elastic-stack-ca.p12 , dest: '{{ certs_dir }}/elastic-stack-ca.p12' }
    - { src: '{{ els_node_7 }}/http.p12', dest: '{{ certs_dir }}/http.p12'}
  when: ansible_hostname[8:14]|lower == 'node-7'

- name: Stop elasticsearch service on {{ ansible_hostname }}
  service:
    name: elasticsearch 
    state: stopped

### Generate a new certificate for the transport layer
- name: Check that the elastic-certificates.p12 on {{ ansible_hostname }}
  stat:
    path: /usr/share/elasticsearch/elastic-certificates.p12
  register: stat_result

- name: Import the newly created CA certificate into the Elasticsearch truststore on {{ ansible_hostname }}
  ansible.builtin.expect:
    command: /usr/share/elasticsearch/bin/elasticsearch-certutil cert --ca-cert {{ certs_dir }}/ca/ca.crt --ca-key {{ certs_dir }}/ca/ca.key
    echo: true
    responses:
      'Please enter the desired output file(.*)': ''
      'Enter password for(.*)': '{{ elastic_pass }}'
  when: not stat_result.stat.exists
  ignore_errors: true
  
### Copy the generated file to the /etc/elasticsearch/cert directory 
- name: Copy elastic-certificates.p12 file to certs directory on {{ ansible_hostname }}
  ansible.builtin.copy:
    src: /usr/share/elasticsearch/elastic-certificates.p12
    dest: '{{ certs_dir }}/elastic-certificates.p12'
    owner: root
    group: elasticsearch
    mode: '640'
    remote_src: yes

### Removing the default ketstore values   
- name: Remove the existing keystore values for the default transport keystore and truststore on {{ ansible_hostname }}
  community.elastic.elastic_keystore:
    name: '{{ item }}'
    state: absent
  with_items:
    - xpack.security.transport.ssl.keystore.secure_password
    - xpack.security.transport.ssl.truststore.secure_password
    - xpack.security.http.ssl.keystore.secure_password

### Adding the ketstore values with latest update
- name: Add the existing keystore values for the default transport keystore and truststore on {{ ansible_hostname }}
  community.elastic.elastic_keystore:
    name: '{{ item }}'
    value: '{{ elastic_pass }}'
  with_items:
    - xpack.security.transport.ssl.keystore.secure_password
    - xpack.security.transport.ssl.truststore.secure_password
    - xpack.security.http.ssl.keystore.secure_password
  notify: 
    - els_restart

### Modifying the elasticsearch.yml file with proper configurations on remaning nodes
- name: Modifying elasticsearch.yml file on {{ ansible_hostname }}
  template:
    src: templates/els_node.j2
    dest: /etc/elasticsearch/elasticsearch.yml
  notify: 
    - els_restart
  
- name: Flush the handlers
  ansible.builtin.meta: flush_handlers